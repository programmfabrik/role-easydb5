#!/bin/bash

# {{ ansible_managed }}

# purpose of this script: execute maintenance tasks around easydb:
#
# - backup sql
# - update via docker and preserve previous state
# - cleanup superfluous docker files
# - start/stop/restart easydb using docker and the run-*.sh scripts

# usage:
#
# {{ easydb_basedir }}/maintain status      # shows running docker containers
# {{ easydb_basedir }}/maintain update      # downloads newest easydb version
# {{ easydb_basedir }}/maintain update-auto # dito plus restart and log into $UPDATELOG
# {{ easydb_basedir }}/maintain backup      # dumps sql into {{ easydb_basedir }}/pgsql/backup
#                                  # is also part of update and update-auto
# {{ easydb_basedir }}/maintain cleanup     # is also part of update and update-auto
# {{ easydb_basedir }}/maintain stop        # stops easydb via docker
#                                  # Danger: stop will be in effect even after reboot.
#                                  # Do not forget to start again.
# {{ easydb_basedir }}/maintain start       # starts easydb via docker
# {{ easydb_basedir }}/maintain restart     # both of the above

# Data directory with the subdirectories "config", "easydb-server", etc.:
BASEDIR={{ easydb_basedir }}
# Which variant of the docker image easydb-server shall be used:
SOLUTION={{ easydb_solution }}
# Space-separated list of names of dbs in postgres in container "easydb-pgsql" to dump:
DBS="{{ easydb_dump_dbs }}"
# Of eas DB in $DBS keep this many newest dumps:
KEEPDBS={{ easydb_dump_keep }}
# Where to write log messages to while doing update-auto:
UPDATELOG={{ easydb_cron_update_log }}

# read local values:
[ -e /etc/default/easydb5 ] && . /etc/default/easydb5

case "$1" in
start)
    set -e
{% if 'elasticsearch' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-elasticsearch.sh
{% endif %}
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-pgsql.sh
{% endif %}
{% if 'eas' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-eas.sh
{% endif %}
{% if 'server' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-server.sh
{% endif %}
{% if 'webfrontend' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-webfrontend.sh
{% endif %}
{% if 'fylr' in easydb_containers_on_host[inventory_hostname] %}
    $BASEDIR/run-fylr.sh
{% endif %}
    ;;
stop)
    if /usr/bin/docker ps -a | grep -q easydb-webfrontend; then
        /usr/bin/docker stop  easydb-webfrontend
        /usr/bin/docker rm -v easydb-webfrontend
    fi

    if /usr/bin/docker ps -a | grep -q easydb-server-{{ easydb_solution }}; then
        /usr/bin/docker stop  easydb-server-{{ easydb_solution }}
        /usr/bin/docker rm -v easydb-server-{{ easydb_solution }}
    fi

    if /usr/bin/docker ps -a | grep -q easydb-server; then
        /usr/bin/docker stop  easydb-server
        /usr/bin/docker rm -v easydb-server
    fi

    if /usr/bin/docker ps -a | grep -q easydb-eas; then
        /usr/bin/docker stop  easydb-eas
        /usr/bin/docker rm -v easydb-eas
    fi

    if /usr/bin/docker ps -a | grep -q easydb-elasticsearch; then
        /usr/bin/docker stop  easydb-elasticsearch
        /usr/bin/docker rm -v easydb-elasticsearch
    fi

    if /usr/bin/docker ps -a | grep -q easydb-fylr; then
        /usr/bin/docker stop  easydb-fylr >/dev/null 2>&1
        /usr/bin/docker rm -v easydb-fylr >/dev/null 2>&1
    fi

    if /usr/bin/docker ps -a | grep -q easydb-pgsql; then
        /usr/bin/docker stop  easydb-pgsql
        /usr/bin/docker rm -v easydb-pgsql
    fi
;;
restart)
    $0 stop 2>&1 | sed '/Network easydb.* not found/d'
    $0 start
;;
status)
    docker ps
;;
update)
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    if   $0 backup
    then $0 tag
{% else %}
         $0 tag
{% endif %}
         $0 cleanup
         $0 pull
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    else
        echo "ERROR: backup failed - not updating!">&2
    fi
{% endif %}
    ;;
update-auto)
    echo             >> $UPDATELOG
    date             >> $UPDATELOG
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    if   $0 backup   >> $UPDATELOG
    then $0 tag      >> $UPDATELOG
{% else %}
         $0 tag      >> $UPDATELOG
{% endif %}
         $0 cleanup  >> $UPDATELOG
         $0 pull     >> $UPDATELOG
         date        >> $UPDATELOG
         $0 restart  2>&1 >>$UPDATELOG |tee -a $UPDATELOG |grep -v '^Creating'
                                                          #^^^^^^^^^^^^^^^^^^
                                                          # prevent lines starting with "Creating"
                                                          # from reaching cron mails, because
                                                          # they're neither warnings nor errors
                                       #^^^^^^^^^^^^^^^^^ put stderr into LOG
                         #^^^^^^^^^^^^ put stdout into LOG(does NOT affect stderr)
                    #^^^^ put stderr where stdout currently points to. (make it reach cron mails)
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    else
        echo "ERROR: backup failed - not updating!">> $UPDATELOG
        echo "ERROR: backup failed - not updating!">&2
    fi
{% endif %}
    ;;
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
backup)
    # do sql backup of all sql dbs $DBS (one per instance and one for eas)
    # Note: there are only $KEEPDBS kept - repeating this quickly removes all old backups (on this host) !
    cd $BASEDIR/pgsql/backup          || exit 2
    /usr/bin/docker ps|grep -q 'easydb-pgsql$' || exit 3
    for DB in $DBS; do
            $0 sqldump $DB            || exit 4
    done
    exit 0
    ;;
sqldump)
    # do sql backup of one given sql db name (inside docker container "easydb-pgsql")
    DB="$2"
    TIME=`date +%Y-%m-%d_%Hh%Mm%Ss`
    FILE=$DB."$TIME".pgdump
    /usr/bin/docker exec easydb-pgsql pg_dump -U postgres -v -Fc -f /backup/$FILE $DB > $FILE.log 2>&1
    EXCODE=$?
    if [ $EXCODE -gt 0 ] ; then
        rm $FILE &>/dev/null
        mv $FILE.log  $FILE.log.FAIL &>/dev/null
        echo "pg_dump $DB exited with $EXCODE. Logfile is $BASEDIR/pgsql/backup/$FILE.log.FAIL"
        echo "pg_dump $DB exited with $EXCODE. Logfile is $BASEDIR/pgsql/backup/$FILE.log.FAIL" >&2
        exit 4
    else
        # rotate so that only the last $KEEPDBS valid dumps remain. Also for logs.
        ls -1 --color=no $DB.*s.pgdump    |sort -r|tail -n +$((KEEPDBS+1))|while read i; do rm $i; done
        ls -1 --color=no $DB.*s.pgdump.log|sort -r|tail -n +$((KEEPDBS+1))|while read i; do rm $i; done
    fi
    exit 0
    ;;
{% endif %}
tag)
    # tag the current docker version as "previous" - good before an update if you want to go back.
    # Danger: this will overwrite the "previous"ly preserved docker version!
{% if 'server' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}/pf/server-$SOLUTION:latest {{ easydb_docker_registry }}/pf/server-$SOLUTION:previous
{% endif %}
{% if 'webfrontend' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}/pf/webfrontend:latest      {{ easydb_docker_registry }}/pf/webfrontend:previous
{% endif %}
{% if 'eas' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}/pf/eas:latest              {{ easydb_docker_registry }}/pf/eas:previous
{% endif %}
{% if 'elasticsearch' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}/pf/elasticsearch:latest    {{ easydb_docker_registry }}/pf/elasticsearch:previous
{% endif %}
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}{{ easydb_docker_postgres_package }}:latest   {{ easydb_docker_registry }}{{ easydb_docker_postgres_package }}:previous
{% endif %}
{% if 'fylr' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker tag {{ easydb_docker_registry }}/pf/fylr:latest         {{ easydb_docker_registry }}/pf/fylr:previous
{% endif %}
    ;;
pull)
{% if 'server' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}/pf/server-$SOLUTION
{% endif %}
{% if 'webfrontend' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}/pf/webfrontend
{% endif %}
{% if 'elasticsearch' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}/pf/elasticsearch
{% endif %}
{% if 'eas' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}/pf/eas
{% endif %}
{% if 'pgsql' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}{{ easydb_docker_postgres_package }}
{% endif %}
{% if 'fylr' in easydb_containers_on_host[inventory_hostname] %}
    /usr/bin/docker pull {{ easydb_docker_registry }}/pf/fylr
{% endif %}
    ;;
cleanup)
    #  free disk space
    #
    #  In our experience, used containers are not damaged by these commands
    #  and used images are not damaged even if they have no running container.
    #  Some error messages may be generated, however ("could not remove").

    echo "removing left over temporary files..."
    LIST=$(/usr/bin/docker ps -qa --no-trunc --filter "status=exited")
    if [ "$LIST" ] ; then
        /usr/bin/docker rm -v $LIST #>/dev/null
        echo "... done."
    else
        echo "... none found."
    fi

    echo "removing unused images..."
    LIST=$(/usr/bin/docker images --filter "dangling=true" -q --no-trunc)
    if [ "$LIST" ] ; then
        /usr/bin/docker rmi $LIST #>/dev/null
        echo "... done."
    else
        echo "... none found."
    fi

    # next step:
    # docker images | grep '<none>' | awk '{print }' | xargs -r docker rmi -f

    echo "removing dangling volumes..."
    LIST=$(/usr/bin/docker volume ls -qf dangling=true)
    if [ "$LIST" ] ; then
        /usr/bin/docker volume rm $LIST #>/dev/null
        echo "... done."
    else
        echo "... none found."
    fi
    echo All done cleaning up.
    ;;
*)
    echo "ERROR: argument '$1' not implemented."
    ;;
esac
